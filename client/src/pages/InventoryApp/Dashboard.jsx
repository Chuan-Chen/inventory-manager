import styled from "styled-components"
import { useEffect, useState } from "react";
import { authSlice } from "../../features/authSlice";
import { useDispatch } from "react-redux";
import Chart from 'chart.js/auto';
const Page = styled.div`
/* ----------------------------------------------
 * Generated by Animista on 2024-7-1 18:2:47
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation slide-in-top
 * ----------------------------------------
 */
@-webkit-keyframes slide-in-top {
  0% {
    -webkit-transform: translateY(-1000px);
            transform: translateY(-1000px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
    opacity: 1;
  }
}
@keyframes slide-in-top {
  0% {
    -webkit-transform: translateY(-1000px);
            transform: translateY(-1000px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateY(0);
            transform: translateY(0);
    opacity: 1;
  }
}


	-webkit-animation: slide-in-top 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
	animation: slide-in-top 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;

    height: 100%;
    width: 100%;

    display: grid;
    align-items: center;
    justify-content: center;



`
/*

*/
export default function Dashboard(){
  const dispatch = useDispatch();
  const [chartCount, setChartCount] = useState(1);

  const [graph, setGraph] = useState([<canvas id = "chart1"></canvas>, <canvas id = "chart2"></canvas>])

  const next = () => {
    if(chartCount >= 0 && chartCount < graph.length-1){
      console.log("next")
      setChartCount(chartCount + 1);
    } 
  }

  const previous = () => {
    if(chartCount > 0 && chartCount <= graph.length-1){
      console.log("previous")
      setChartCount(chartCount - 1);
    }
  }



  useEffect(()=>{
    dispatch(authSlice.actions.checkToken());
    if(chartCount == 0){
      new Chart(document.getElementById('chart1'), {
        type: 'bar',
        data: {
          labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
          datasets: [{
            label: '# of Votes',
            data: [12, 19, 3, 5, 2, 3],
            borderWidth: 1
          }]
        },
        options: {
          scales: {
            y: {
              beginAtZero: true
            }
          }
        }
      });
    }


  },[])
    return (
        <Page>
          <button onClick={next}>next</button>
          <button onClick={previous}>previous</button>
            {chartCount}
            {graph[chartCount]}
        </Page>
    )
}